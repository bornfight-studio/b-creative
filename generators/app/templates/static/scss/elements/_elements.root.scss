@use "sass:math";

/**
 * Generate css variables for spacing if use-css-var is true
 */
@if $use-css-var == true {
    :root {
        @each $size, $values in $settings-spacings {
            #{$css-variable-prefix}#{$size}: #{fluidSizing(map-deep-get($settings-spacings, $size, $breakpoint-sm), map-deep-get($settings-spacings, $size, $breakpoint-xl))};
        }
        @each $size, $values in $settings-typography {
            #{$css-variable-prefix}#{$size}: #{fluidSizing(map-deep-get($settings-typography, $size, $breakpoint-sm), map-deep-get($settings-typography, $size, $breakpoint-xl))};
        }
        @each $size, $values in $settings-breakpoints {
            #{$css-variable-prefix}breakpoint-#{$size}: #{map-get($settings-breakpoints, $size)};
        }
        @each $size, $values in $settings-colors {
            #{$css-variable-prefix}#{$size}: #{map-get($settings-colors, $size)};
        }
    }
}

/**
 * Generate css variables for spacing in > xxl breakpoint if use-css-var is true and use-container is false
 */
@if $use-css-var == true and $use-container == false {
    :root {
        @include mq(null, xxl) {
            @each $size, $values in $settings-spacings {
                #{$css-variable-prefix}#{$size}: #{fluidSizingXXL(map-deep-get($settings-spacings, $size, $breakpoint-xl), math.div(map-deep-get($settings-spacings, $size, $breakpoint-xl), $breakpoint-xxl) * $breakpoint-xxxl * $big-viewport-coefficient)};
            }
            @each $size, $values in $settings-typography {
                #{$css-variable-prefix}#{$size}: #{fluidSizingXXL(map-deep-get($settings-typography, $size, $breakpoint-xl), math.div(map-deep-get($settings-typography, $size, $breakpoint-xl), $breakpoint-xxl) * $breakpoint-xxxl * $big-viewport-coefficient)};
            }
        }
    }
}
