@use 'sass:math';

/**
 * Fluid font sizes
 * @param {String} $size - Size
 * usage:
 * @include fontSize("a5");
 */
@mixin fontSize($size: null) {
    @if $size != null {
        font-size: fluidSizing(map-deep-get($settings-typography, $size, $breakpoint-sm), map-deep-get($settings-typography, $size, $breakpoint-xl));

        @if $use-container == false {
            @include mq(null, xxl) {
                font-size: fluidSizingXXL(map-deep-get($settings-typography, $size, $breakpoint-xl), math.div(map-deep-get($settings-typography, $size, $breakpoint-xl), $breakpoint-xxl) * $breakpoint-xxxl * $big-viewport-coefficient);
            }
        }
    }
}

/**
 * Fluid property values
 * @param {String} $property - Property
 * @param {String} $spacing - Spacing
 * @param {String} $value - Value
 * usage:
 * @include fluidValue("margin-top", "s-56");
 * @include fluidValue("max-width", null, 600px);
 * used In fluidValue mixin and fontSize mixin
 * use mixin instead
 */
@mixin fluidValue($property: null, $spacing: null, $value: null) {
    @if $spacing != null {
        #{$property}: fluidSizing(map-deep-get($settings-spacings, $spacing, $breakpoint-sm), map-deep-get($settings-spacings, $spacing, $breakpoint-xl));

        @if $use-container == false {
            @include mq(null, xxl) {
                #{$property}: fluidSizingXXL(map-deep-get($settings-spacings, $spacing, $breakpoint-xl), math.div(map-deep-get($settings-spacings, $spacing, $breakpoint-xl), $breakpoint-xxl) * $breakpoint-xxxl * $big-viewport-coefficient);
            }
        }

    } @else if $value != null {
        #{$property}: $value;

        @if $use-container == false {
            @include mq(null, xxl) {
                #{$property}: fluidSizingXXL($value, math.div($value, $breakpoint-xxl) * $breakpoint-xxxl * $big-viewport-coefficient);
            }
        }
    }
}

/**
 * Fluid font sizes
 * @param {Number} $min-size - Min font size
 * @param {Number} $max-size - Max font size
 * @param {Number} $min-breakpoint - Min breakpoint
 * @param {Number} $max-breakpoint - Max breakpoint
 * @param {String} $unit - Return unit
 * @return {String}
 * used In fluidValue mixin and fontSize mixin
 * use mixin instead
 */
@function fluidSizing($min-size, $max-size, $min-breakpoint: $breakpoint-sm, $max-breakpoint: $breakpoint-xl, $unit: vw) {
    $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
    $slope-to-unit: round($slope * 100, 2);
    $intercept-rem: round(rem($min-size - $slope * $min-breakpoint), 2);
    $min-size-rem: round(rem($min-size), 2);
    $max-size-rem: round(rem($max-size), 2);

    @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}

/**
 * Fluid font sizes
 * Used For Sizes > $breakpoint-xxl
 * @param {Number} $min-size - Min font size
 * @param {Number} $max-size - Max font size
 * @param {Number} $min-breakpoint - Min breakpoint
 * @param {Number} $max-breakpoint - Max breakpoint
 * @param {String} $unit - Return unit
 * @return {String}
 */
@function fluidSizingXXL($min-size, $max-size, $min-breakpoint: $breakpoint-xxl, $max-breakpoint: $breakpoint-xxxl, $unit: vw) {
    $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
    $slope-to-unit: round($slope * 100, 2);
    $intercept-rem: round(rem($min-size - $slope * $min-breakpoint), 2);
    $min-size-rem: round(rem($min-size), 2);
    $max-size-rem: round(rem($max-size), 2);

    @return max(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem});
}


/**
 * Round number to decimals
 * @param {Number} $number - Number to round
 * @param {Number} $decimals - Number of decimals
 */
@function round($number, $decimals: 0) {
    $n: 1;
    @if $decimals > 0 {
        @for $i from 1 through $decimals {
            $n: $n * 10;
        }
    }
    @return math.div(math.round($number * $n), $n);
}

/**
 * Get spacing values from settings
 */
@function getSpacingValues($spacing) {
    @return map-get($settings-spacings, $spacing);
}

/**
 * Fetch nested keys
 * @param {Map} $map - Map
 * @param {Arglist} $keys - Keys to fetch
 * @return {*}
 */
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}
